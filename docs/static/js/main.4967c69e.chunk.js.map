{"version":3,"sources":["Dates.jsx","Calendar.jsx","index.js"],"names":["Dates","state","today","Date","events","selectedDate","writingNote","handleClick","startDate","date","setDate","format","add","days","setState","console","log","weekdays","set","year","getYear","this","props","month","getMonth","getDate","nextDay","sub","startOfMonth","id","Array","map","x","day","className","week","Component","Calendar","viewDate","move","addYears","addMonths","subYears","subMonths","parseWeekday","getDay","onClick","size","color","Clock","useState","time","setTime","useEffect","setInterval","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4967c69e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n    format,\r\n    add,\r\n    sub,\r\n    set,\r\n    getYear,\r\n    getMonth,\r\n    getDate,\r\n    startOfMonth,\r\n} from \"date-fns\";\r\nimport nextDay from \"date-fns/nextDay\";\r\nclass Dates extends Component {\r\n    state = {\r\n        today: new Date(),\r\n        events: [],\r\n        selectedDate: null,\r\n        writingNote: false,\r\n    };\r\n\r\n    handleClick = (startDate, date) => {\r\n        let setDate = format(add(startDate, { days: date }), \"yyyy-MM-dd\");\r\n        this.setState({ writingNote: true, selectedDate: setDate });\r\n    };\r\n\r\n    render() {\r\n        console.log(\"rendered Dates\");\r\n\r\n        const weekdays = [\r\n            \"Monday\",\r\n            \"Tuesday\",\r\n            \"Wednesday\",\r\n            \"Thursday\",\r\n            \"Friday\",\r\n            \"Saturday\",\r\n            \"Sunday\",\r\n        ];\r\n        let startDate = set(new Date(), {\r\n            year: getYear(this.props.date),\r\n            month: getMonth(this.props.date),\r\n            date: getDate(\r\n                nextDay(sub(startOfMonth(this.props.date), { days: 7 }), 1)\r\n            ),\r\n        });\r\n        return (\r\n            <div id=\"dates-container\">\r\n                {[...Array(7)].map((x, day) => (\r\n                    <div key={day} className=\"weekdays\">\r\n                        <div className=\"day-names\">\r\n                            <b>{weekdays[day]}</b>\r\n                        </div>\r\n                        {[...Array(5)].map((x, week) => (\r\n                            <div\r\n                                key={week + day}\r\n                                // If the currently printed date matches today's date, use the date-today class\r\n                                className={\r\n                                    format(\r\n                                        add(startDate, {\r\n                                            days: 7 * week + day,\r\n                                        }),\r\n                                        \"dd\"\r\n                                    ) === format(this.state.today, \"dd\") &&\r\n                                    format(this.state.today, \"yyyyMM\") ===\r\n                                        format(startDate, \"yyyyMM\")\r\n                                        ? \"date-today\"\r\n                                        : // Else if the selected month does not match this month, use the date-different-month class\r\n                                        format(\r\n                                              add(startDate, {\r\n                                                  days: 7 * week + day,\r\n                                              }),\r\n                                              \"yyyyMM\"\r\n                                          ) !==\r\n                                          format(this.state.today, \"yyyyMM\")\r\n                                        ? \"date-different-month\"\r\n                                        : // Else use the date class\r\n                                          \"date\"\r\n                                }\r\n                            >\r\n                                {format(\r\n                                    add(startDate, {\r\n                                        days: 7 * week + day,\r\n                                    }),\r\n                                    \"d\"\r\n                                )}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Dates;\r\n","import React, { Component, useEffect, useState } from \"react\";\r\nimport { IoArrowBackOutline, IoArrowForwardOutline } from \"react-icons/io5\";\r\nimport {\r\n    getDay,\r\n    format,\r\n    addMonths,\r\n    subMonths,\r\n    addYears,\r\n    subYears,\r\n} from \"date-fns\";\r\nimport Dates from \"./Dates\";\r\nclass Calendar extends Component {\r\n    state = {\r\n        today: new Date(),\r\n        viewDate: new Date(),\r\n    };\r\n    handleClick = (move) => {\r\n        if (move === \"next\") {\r\n            console.log(\"clicked next\");\r\n            if (format(this.state.viewDate, \"MM\") === \"12\") {\r\n                console.log(\"Previous month was December\");\r\n                this.setState({ viewDate: addYears(this.state.viewDate, 1) });\r\n            }\r\n            this.setState({\r\n                viewDate: addMonths(this.state.viewDate, 1),\r\n            });\r\n        } else if (move === \"previous\") {\r\n            console.log(\"clicked previous\");\r\n            if (format(this.state.viewDate, \"MM\") === \"01\") {\r\n                console.log(\"Previous month was January\");\r\n                this.setState({ viewDate: subYears(this.state.viewDate, 1) });\r\n            }\r\n            this.setState({\r\n                viewDate: subMonths(this.state.viewDate, 1),\r\n            });\r\n        } else if (move === \"today\") {\r\n            console.log(\"clicked today\");\r\n            this.setState({ viewDate: this.state.today });\r\n        }\r\n    };\r\n\r\n    parseWeekday = () => {\r\n        const today = new Date();\r\n        switch (getDay(today)) {\r\n            case 0:\r\n                return \"Sunday\";\r\n            case 1:\r\n                return \"Monday\";\r\n            case 2:\r\n                return \"Tuesday\";\r\n            case 3:\r\n                return \"Wednesday\";\r\n            case 4:\r\n                return \"Thursday\";\r\n            case 5:\r\n                return \"Friday\";\r\n            case 6:\r\n                return \"Saturday\";\r\n            default:\r\n                return \"Unknown weekday\";\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { viewDate } = this.state;\r\n        console.log(\"rendered Calendar\");\r\n\r\n        return (\r\n            <div id=\"calendar-container\">\r\n                <header>\r\n                    <div id=\"clock\">\r\n                        {this.parseWeekday()}&nbsp;\r\n                        <b>\r\n                            <Clock />\r\n                        </b>\r\n                    </div>\r\n                </header>\r\n                <header>\r\n                    <button\r\n                        id=\"previous-month\"\r\n                        onClick={() => {\r\n                            this.handleClick(\"previous\");\r\n                        }}\r\n                    >\r\n                        <IoArrowBackOutline size={20} color={\"#646464\"} />\r\n                    </button>\r\n\r\n                    <button\r\n                        id=\"today-month\"\r\n                        onClick={() => this.handleClick(\"today\")}\r\n                    >\r\n                        {\" \"}\r\n                        <b id=\"month\">\r\n                            {`${format(viewDate, \"MMMM\")} ${format(\r\n                                viewDate,\r\n                                \"yyyy\"\r\n                            )}`}{\" \"}\r\n                        </b>\r\n                    </button>\r\n\r\n                    <button\r\n                        id=\"next-month\"\r\n                        onClick={() => {\r\n                            this.handleClick(\"next\");\r\n                        }}\r\n                    >\r\n                        <IoArrowForwardOutline size={20} color={\"#646464\"} />\r\n                    </button>\r\n                </header>\r\n                <Dates date={viewDate} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Calendar;\r\n\r\nconst Clock = () => {\r\n    const [time, setTime] = useState(format(new Date(), \"p\"));\r\n    useEffect(() => {\r\n        setInterval(() => setTime(format(new Date(), \"p\"), 60000));\r\n    }, []);\r\n    return time;\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport \"./css/calendar.css\";\nimport \"./css/dates.css\";\nimport \"./css/events.css\";\nimport \"./css/dropdown_menu.css\";\nimport Calendar from \"./Calendar\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Calendar />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}